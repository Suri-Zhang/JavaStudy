package day36Feb23th;import java.util.NoSuchElementException;/** * A class that implements the ADT queue by using a chain of linked nodes that * has references to the front and end of the chain. Adds will be after the last * node. Removes will be from the front node. */public final class LinkedQueue<T> implements QueueInterface<T> {	private Node firstNode; // References node at front of queue	private Node lastNode; // References node at back of queue	public LinkedQueue() {		firstNode = null;		lastNode = null;	} // end default constructor	public void add(T newEntry) {		Node newValue = new Node(newEntry);		if (firstNode == null) {			firstNode = newValue;			lastNode = newValue;		}		else {			lastNode.next = newValue;		}		lastNode = newValue;	} // end enqueue	public T peek() {		if (isEmpty())			throw new NoSuchElementException();		else			return firstNode.data;	} // end getFront	public T remove() {		if (isEmpty()) {			throw new NoSuchElementException();		}		// TODO		T newValue = peek();		 // Might throw NoSuchElementException		if (firstNode == lastNode) {			firstNode = null;			lastNode = null;		}		else {			firstNode = firstNode.next;		}		return newValue;	} // end dequeue	public boolean isEmpty() {		// TODO		return firstNode == null;	} // end isEmpty	public void clear() {		// TODO		while (!isEmpty()) {			remove();		}	} // end clear	private class Node {		private T data;		private Node next;		private Node(T data) {			this.data = data;			this.next = null;		}	}}